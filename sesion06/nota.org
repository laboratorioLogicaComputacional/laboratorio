#+LATEX_CLASS: article
#+LANGUAGE: es
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+OPTIONS: toc:nil
#+DATE:
#+AUTHOR: Dr. Miguel Carrillo Barajas \\
#+AUTHOR: Estefanía Prieto Larios \\
#+AUTHOR: Mauricio Esquivel Reyes \\
#+TITLE: Sesión de laboratorio 06 \\
#+TITLE: Lógica Computacional
* Formas normales 
** Literales de una formula
Conjunto de variables (solo indices) de una formula.
#+begin_src haskell
varsOf :: PL -> [Indice]
varsOf Top = []
varsOf Bot = []
varsOf (Var p) = [p]
varsOf (Oneg p) = case p of
  Var n -> [-n]
  _ -> varsOf p 
varsOf (Oand p q) = nub $ (varsOf p) ++ (varsOf q)
varsOf (Oor p q) = nub $ (varsOf p) ++ (varsOf q)
varsOf (Oimp p q) = nub $ (varsOf p) ++ (varsOf q)
#+end_src
** Formula valida
Decide si $\phi$ es valida.
#+begin_src haskell
enValPL :: PL -> Bool
enValPL phi = and[satMod y phi |y <- powerSet(varsOf(phi))]
#+end_src
** Formula satisfacible
Decide si $\phi$ es satisfactible.
#+begin_src haskell
enSatPL :: PL -> Bool
enSatPl phi = or[satMod y phi | y <- powerSet(varsOf(phi))]
#+end_src
** Lista de clausulas
#+begin_src haskell
-- Nos da la lista de clausulas de una formula
-- Precondición: la formula debe estar en CNF
listClau :: PL -> [PL]
listClau phi = case phi of 
  Oand alpha betha -> listClau alpha ++ listClau betha 
  _-> [phi]
#+end_src
** Lista de clausulas como lista de indices
#+begin_src haskell
-- Nos da las clasusulas de una formula en forma de listas de indices
-- Precondición: la formula debe estar en CNF
liteCNF :: PL -> [[Indice]]
liteCNF phi = if esCNF(phi) then 
  map varsOf (listClau phi)
 else
  error $ "No esta en CNF"
#+end_src
** Lista de terminos
#+begin_src haskell
-- Nos da la lista de terminos de una formula
-- Precondición: la formula debe estar en DNF
listTerm :: PL -> [PL]
listTerm phi = case phi of 
  Oor alpha beta -> listTerm alpha ++ listTerm beta
  _ -> [phi]
#+end_src
** Lista de terminos como lista de indices
#+begin_src haskell
-- Nos da los terminos de una formula en forma de lista de indices
-- Precondición: la formula debe estar en DNF
liteDNF :: PL -> [[Indice]]
liteDNF phi = if esDNF(phi) then 
  map varsOf (listTerm phi)
 else
  error $ "No esta en DNF"
#+end_src
** Indices complementarios
#+begin_src haskell
-- Nos indica si en una lista de indices existen dos complementarios
comple :: [Indice] -> Bool
comple lst = case lst of
  [] -> False
  x:xs -> if elem (-x) xs then True else comple xs
#+end_src
** CNF valida
#+begin_src haskell
-- Nos dice si una formula en CNF es valida
-- Precondición: la formula debe estar en CNF
valCNF :: PL -> Bool
valCNF phi = and (map comple(liteCNF(phi)))
#+end_src
** DNF satisfacible
#+begin_src haskell
-- Nos dice si una formula en DNF es satisfacible
-- Precondición: la formula debe estar en DNF
satDNF phi = if esDNF phi then 
satDNF phi = or (map not (map comple (liteDNF(phi)))
#+end_src
* Formulas de Horn
La sintaxis de las formulas (proposicionales) de Horn, HORN, se define con notación BNF como sigue.

\[HORN                ::= <ClausulaDeHorn> | <ClausulaDeHorn> \land HORN.\]
\[<ClausulaDeHorn>    ::= (<Premisa> \rightarrow <Conclusion>)\]
\[<Premisa>           ::= <Atom> | (<Atom> \land <Premisa>)\]
\[<Conclusion>        ::= <Atom>\]
\[<Atom>              ::= \bot | \top | <Variable>\]
\[<Variable>          ::= v <Indice>\]
\[<Indice>            ::= i, i \in \mathbb{N}.\]

Una formula de Horn es una conjunción de clausulas de Horn.
Una clausula de Horn es una implicación cuya premisa es una conjuncion de 
átomos (\bot,\top,v_i) y cuya conclusión es un átomo.

#+begin_src haskell
-- Atomos para clausulas de Horn
data Hatom  =  Htop | Hbot | Hvar Indice deriving (Eq) 
-- Clausula de Horn: Premisa=[atomo1,...,atomoN] -> Conclusion=Atomo
data Fhorn  =   Himp [Hatom] Hatom                     
 -- Conjuncion de formulas de Horn 
              | Hand Fhorn Fhorn  deriving (Eq, Show)  
#+end_src
** Atomos marcados
Nos regresa True si todos los atomos de una premisa estan marcados. False en otro caso
#+begin_src haskell
atomosMarcados :: [Hatom] -> [Hatom] -> Bool
atomosMarcados lm premisa = and [a `elem` lm | a <- premisa] 
#+end_src
** Marca conclusiones 
Agrega las conclusiones de una lista de clausulas de Horn a una lista de atomos marcados.
#+begin_src haskell
marcaConclusiones :: [Hatom] -> [Fhorn] -> [Hatom]
marcaConclusiones lMarcados lcH = case lcH of
 [] -> lMarcados
 (Himp _ c):cHs -> marcaConclusiones (c:lMarcados) cHs
 _  -> error $ "marcaConclusiones: no es una clausula de Horn: "++show (head lcH)
#+end_src
** Clausulas marcables 
Regresa la lista de clausulas de $\phi$ que tienen una conclusión marcable.
Def. $f$ es una clausula con conclusión marcable si: $f = p \rightarrow c$, los atomos de $p$ están marcados, y $c$ no está marcada.
#+begin_src haskell
clausulasHmarcables :: [Hatom] -> Fhorn -> [Fhorn]
clausulasHmarcables lMarcados phi = case phi of
 Himp premisa conclusion -> if (atomosMarcados lMarcados premisa) && 
(conclusion `notElem` lMarcados)
  then [phi]
  else []
 Hand f1 f2 -> clausulasHmarcables lMarcados f1 ++ clausulasHmarcables lMarcados f2
#+end_src
** Marca formula de Horn
Mientras $\phi$ tenga una clausula con conclusion marcable, marca las conclusiones de dichas clausulas.
Def. $f$ es una clausula con conclusión marcable si: $f = p \rightarrow c$, los atomos de $p$ están marcados, y $c$ no está marcada.
#+begin_src haskell
marcaFormulaHorn :: [Hatom] -> Fhorn -> [Hatom]
marcaFormulaHorn lMarcados phi = 
    if cHornMarcables == []
        then lMarcados
        else marcaFormulaHorn lMarcadosNew phi
    where
    cHornMarcables  = clausulasHmarcables lMarcados phi
    lMarcadosNew    = marcaConclusiones lMarcados cHornMarcables
#+end_src
** Horn es satisfacible
#+begin_src haskell
enSatHorn :: Fhorn -> Bool
enSatHorn phi = if Hbot `elem` (marcaFormulaHorn [Htop] phi)
                    then False
                    else True
#+end_src
