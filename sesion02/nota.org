#+LATEX_CLASS: article
#+LANGUAGE: es
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+TITLE: Sesión de laboratorio 02

* Haskell
Para refrescar lo aprendido, en esta ocasión veremos algunas funciones con los
tipos por defecto de haskell.
** Funciones
*** Potencia
#+begin_src haskell
pote :: Int -> Int -> Int
pote x 0 = 1
pote x y = x * (pote x (y-1))
#+end_src
*** Potencia B
#+begin_src haskell
poteB :: Int -> Int -> Int
#+end_src
*** Toma primeros n elementos
#+begin_src haskell
toma :: Int -> [a] -> [a]
#+end_src
*** Mayores
#+begin_src haskell
mayores :: Ord a => [a] -> a -> [a]
#+end_src

** Tipos propios
Definiremos a los números naturales y algunas funciones de estos.
*** Definición
#+begin_src haskell
data Natural = Cero | Suc Natural deriving (Eq, Show)
let tres = (Suc (Suc (Suc Cero)))
#+end_src
*** Suma
#+begin_src haskell 
suma :: Natural -> Natural -> Natural
#+end_src
*** Producto
#+begin_src haskell 
prod :: Natural -> Natural -> Natural
#+end_src
*** Potencia
#+begin_src haskell 
potN :: Natural -> Natural -> Natural
#+end_src
*** Int a Natural
#+begin_src haskell 
int2Natural :: Natural -> Natural -> Natural
#+end_src
*** Natural a Int
#+begin_src haskell 
natural2Int :: Natural -> Natural -> Natural
#+end_src
* Lógica Proposicional
** Sintaxis
Esta es la sintaxis de la Lógica Proposicional que utilizaremos. 
\[PL ::= <ProposiciónAtómica> | \neg PL | (PL \land PL) | (PL \lor PL) | (PL \to PL) \]
\[<ProposiciónAtómica> ::= \top | \bot | <VariableProposicional>\]
\[<VariableProposicional> ::= v<Indice>\]
\[ <Indice> ::= [i | i \in \mathbb{N}]\]

** Definición en Haskell
#+begin_src haskell
-- Tipo de dato indice
type Indice = Int

-- Tipo de dato fórmula
data PL = Top | Bot  | Var Indice
              | Oneg PL 
              | Oand PL PL | Oor PL PL 
              | Oimp PL PL deriving (Eq, Show)
#+end_src

** Funciones
*** Elimina implicaciones
#+begin_src haskell
quitaImp :: PL -> PL
#+end_src
*** Forma Normal de Negación
#+begin_src haskell
toNNF :: PL -> PL
#+end_src 
*** Variables de una formula
#+begin_src haskell 
varsOf :: PL -> [PL]
#+end_src
