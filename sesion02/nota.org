#+LATEX_CLASS: article
#+LANGUAGE: es
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+TITLE: Sesión de laboratorio 02
* Haskell
Para refrescar lo aprendido, en esta ocasión veremos algunas funciones con los
tipos por defecto de haskell.
** Funciones
*** Potencia
#+begin_src haskell
poteB :: Int -> Int -> Int
poteB x y = case y of 
        0 -> 1
        _ -> if y > 0 
        then x * (poteB x (y-1))
        else error $ "La potencia tiene que ser positiva, y = "++ show y
#+end_src
*** Toma primeros n elementos de una lista
#+begin_src haskell
toma :: Int -> [a] -> [a]
toma 0 _ = []
toma _ [] = []
toma n (x:xs) = [x] ++ toma  
#+end_src
*** Mayores
#+begin_src haskell
mayores :: Ord a => [a] -> a -> [a]
mayores l a = [x | x <- l , x > a]
#+end_src
** Tipos propios
Definiremos a los números naturales y algunas funciones de estos.
*** Definición
#+begin_src haskell
data Natural = Cero | Suc Natural deriving (Eq, Show)
let tres = (Suc (Suc (Suc Cero)))
#+end_src
*** Suma
#+begin_src haskell 
suma :: Natural -> Natural -> Natural
suma Cero x = x
suma (Suc x) y = Suc(suma x y)
#+end_src
*** Suma (Recursión estructural sobre y)
#+begin_src haskell 
suma :: Natural -> Natural -> Natural
suma x y = case y of
     Cero -> x
     Suc z -> Suc (suma x z)
#+end_src
*** Producto
#+begin_src haskell 
prod :: Natural -> Natural -> Natural
prod x y = case y of 
     Cero -> Cero
     Suc z -> suma (prod x z) x
#+end_src
*** Potencia
#+begin_src haskell 
potN :: Natural -> Natural -> Natural
potN x y = case y of
     Cero -> Suc Cero
     Suc z -> prod (potN x z) x 
#+end_src
* Lógica Proposicional
** Sintaxis
Esta es la sintaxis de la Lógica Proposicional que utilizaremos. 
\[PL ::= <ProposiciónAtómica> | \neg PL | (PL \land PL) | (PL \lor PL) | (PL \to PL) \]
\[<ProposiciónAtómica> ::= \top | \bot | <VariableProposicional>\]
\[<VariableProposicional> ::= v<Indice>\]
\[ <Indice> ::= [i | i \in \mathbb{N}]\]

** Definición en Haskell
#+begin_src haskell
-- Tipo de dato indice
type Indice = Int

-- Tipo de dato fórmula
data PL = Top | Bot  | Var Indice
              | Oneg PL 
              | Oand PL PL | Oor PL PL 
              | Oimp PL PL deriving (Eq, Show)
#+end_src

** Funciones
*** Elimina implicaciones
#+begin_src haskell
quitaImp :: PL -> PL
quitaImp phi = case phi of
     Top -> Top
     Bot -> Bot
     Var x -> Var x
     Oneg x -> Oneg (quitaImp x)
     Oand x y -> Oand (quitaImp x) (quitaImp y)
     Oor x y -> Oor (quitaImp x) (quitaImp y)
     Oimp x y -> Oor (Oneg (quitaImp x)) (quitaImp y)
#+end_src
*** Forma Normal de Negación
#+begin_src haskell
toNNF :: PL -> PL
toNNF phi = case quitaImp phi of
     Oneg (Oand x y) -> toNNF $ Oor (Oneg $ toNNF x) (Oneg $ toNNF y)
     Oneg (Oor x y) -> toNNF $ Oand (Oneg $ toNNF x) (Oneg $ toNNF y)
     Oneg (Oneg x) -> toNNF x
     Oand x y -> Oand (toNNF x) (toNNF y)
     Oor x y -> Oor (toNNF x) (toNNF y)
     Oneg x -> Oneg (toNNF x)
     x -> x
#+end_src 
*** Variables de una formula
#+begin_src haskell 
varsOf :: PL -> [PL]
varsOf phi = case phi of
    Top -> []
    Bot -> []
    Var x -> [Var x]
    Oneg x -> varsOf x
    Oand x y -> varsOf x ++ varsOf y
    Oor x y -> varsOf x ++ varsOf y
    Oimp x y -> varsOf x ++ varsOf y
#+end_src
