#+LATEX_CLASS: article
#+LANGUAGE: es
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+TITLE: Sesión de laboratorio 03
* Lógica Proposicional
** Funciones
Veremos algunas funciones que ya definimos para la lógica proposicional y 
realizaremos un par de nuevas funciones, haciendo recursión sobre la estructura.
*** Elimina implicaciones
#+begin_src haskell
quitaImp :: PL -> PL
quitaImp phi = case phi of
 Top -> Top
 Bot -> Bot
 Var x -> Var x
 Oneg x -> Oneg (quitaImp x)
 Oand x y -> Oand (quitaImp x) (quitaImp y)
 Oor x y -> Oor (quitaImp x) (quitaImp y)
 Oimp x y -> Oor (quitaImp (Oneg  x)) (quitaImp y)
#+end_src
*** Forma Normal de Negación
#+begin_src haskell
toNNF :: PL -> PL
toNNF phi = case quitaImp phi of
 Oneg (Oand x y) -> toNNF $ Oor (Oneg $ toNNF x) (Oneg $ toNNF y)
 Oneg (Oor x y) -> toNNF $ Oand (Oneg $ toNNF x) (Oneg $ toNNF y)
 Oneg (Oneg x) -> toNNF x
 Oand x y -> Oand (toNNF x) (toNNF y)
 Oor x y -> Oor (toNNF x) (toNNF y)
 Oneg x -> Oneg (toNNF x)
 x -> x
#+end_src 
*** Forma Normal de Negación 2
**** noImp2NNF
#+begin_src haskell
-- Precondición: phi no tiene operadores de implicación.
noImp2NNF :: PL -> PL
noImp2NNF phi = case phi of
 -- Casos base:
 Top -> Top
 Bot -> Bot
 Var v -> Var v
 -- Casos recursivos:
 Oneg alfa -> case alfa of
  -- Casos bases (alfa)
  Top -> Bot
  Bot -> Top
  Var v -> Oneg (Var v)
  -- Casos recursivos (alfa)
   Oneg g -> noImp2NNF g
   Oand g h -> noImp2NNF (Oor (Oneg g) (Oneg h))
   Oor g h -> noImp2NNF (Oand (Oneg g) (Oneg h))
 Oand alfa beta -> Oand (noImp2NNF alfa) (noImp2NNF beta)
 Oor alfa beta -> Oor (noImp2NNF alfa) (noImp2NNF beta)
#+end_src
**** toNNF2
#+begin_src haskell
-- Precondición: ninguna.
toNNF2 :: PL -> PL
toNNF2 = noImp2NNF . quitaImp -- Composicion de funciones.
#+end_src
*** Disyunciones de una formula
#+begin_src haskell 
disy :: PL -> [PL]
disy phi = case phi of 
 Top -> []
 Bot -> []
 Var v -> []
 Oneg alpha -> disy alpha 
 Oor alpha beta -> [Oor aplpha beta] ++ disy alpha ++ disy beta 
 Oand alpha beta -> disy alpha ++ disy beta
 Oimp alpha beta -> disy alpha ++ disy beta
#+end_src
*** Número de disyunciones de una formula
#+begin_src haskell
numdisy :: PL -> Int
numdisy phi -> case phi of
      Top -> 0
      Bot -> 0
      Var v -> 0
      Oneg alpha -> numdisy alpha
      Oor alpha beta -> 1 + numdisy alpha + numdisy beta
      Oand alpha beta -> numdisy alpha + numdisy beta
      Oimp alpha beta -> numdisy alpha + numdisy beta  
#+end_src 
*** isInNFF
Función que nos indica si una formula esta en forma normal de negación.
#+begin_src haskell
isInNFF :: PL -> Bool
isInNFF phi = case phi of
 Top-> True
 Bot-> True
 Var v -> True
 Oneg alpha -> case alpha of
  Var x -> True
  _ -> False 
 Oor alpha beta -> isInNFF alpha && isInNFF beta
 Oand alpha beta -> isInNFF alpha && isInNFF beta
 Oimp _ _ -> False
#+end_src
